	group = PROJ_GROUP
	version = PROJ_VERSION	
	
	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "maven"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	jar {
		manifest {
			attributes (
					'Implementation': version,
					'Specification-Version': version,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}


	dependencies {
		testCompile 'junit:junit:4.12'
	}

	repositories {
		mavenCentral()
		mavenLocal()
		
	}
	if(project.getProperty('skipTest'))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false  
	}
	
	
sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'src-camel'
          	srcDir 'src-cxf'
          	srcDir 'src-http'
          	srcDir 'src-jgroups'
          	srcDir 'src-jms'
          	srcDir 'src-mina'
          	srcDir 'src-netty'
          	srcDir 'src-rmi'
          	srcDir 'src-thread'
        }
        resources {
           srcDir 'resources' 
            
        }
         compileClasspath = configurations.compile
    }
    test {
        java {
            srcDir 'test'
        }
        resources{
        	srcDir 'resources-test'
        }
    }
    
}

dependencies {
	
    compile (
            [group: 'com.bbossgroups', name: 'bboss-util', version: "${version}", transitive: false],
            [group: 'com.bbossgroups', name: 'bboss-core', version: "${version}", transitive: false],
            [group: 'com.bbossgroups', name: 'bboss-soa', version: "${version}", transitive: false],
            [group: 'log4j', name: 'log4j', version: '1.2.16', transitive: false],          
            [group: 'oro', name: 'oro', version: '2.0.8', transitive: false],         
            [group: 'cglib', name: 'cglib-nodep', version: '3.1', transitive: false],
              [group: 'commons-lang', name: 'commons-lang', version: '2.6', transitive: false],
              [group: 'commons-logging', name: 'commons-logging', version: '1.1', transitive: false],
           [group: 'com.caucho', name: 'hessian', version: '4.0.7', transitive: false],
           [group: 'org.jboss.netty', name: 'netty', version: '3.2.10.Final', transitive: false],
           [group: 'org.apache.mina', name: 'mina-core', version: '2.0.0-RC1', transitive: true],
           [group: 'org.ow2.asm', name: 'asm', version: '5.0.3', transitive: true],
            [group: 'bsh', name: 'bsh', version: '2.0b1', transitive: false],
            [group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1', transitive: false],
             
            [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0.1', transitive: false],
            [group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.0.1', transitive: false],
            [group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.0.1', transitive: false],
            [group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.1.3', transitive: false],
            [group: 'commons-codec', name: 'commons-codec', version: '1.10', transitive: false],
            [group: 'org.apache.camel', name: 'camel-core', version: '2.2.0', transitive: false],
            [group: 'org.apache.camel', name: 'camel-jms', version: '2.2.0', transitive: false],
            [group: 'icu4j', name: 'icu4j', version: '2.6.1', transitive: false],
            [group: 'org.jasypt', name: 'jasypt', version: '1.9.2', transitive: false],
            fileTree(dir: 'lib', include: '**/*.jar'),
    )
    testCompile(
    		[group: 'xpp3', name: 'xpp3', version: '1.1.4c', transitive: false],
            [group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.3.1', transitive: false],
             [group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.10',transitive: true],
             [group: 'com.caucho', name: 'hessian', version: '4.0.7', transitive: false]
    )
}
task sourcesJar(type: Jar) {
		classifier = "sources"	
		from sourceSets.main.allJava
	}
	
	task javaDocJar(type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
	    archives sourcesJar, javaDocJar
	}
ext.uploadtocenter=uploadArchivesToMavenCenter.equals("true")
if(uploadtocenter)
{
	signing {
	        //required { uploadtocenter }
	        sign configurations.archives
	 }
}
uploadArchives {
	  repositories {
	   
		 mavenDeployer {
		     
			 	  
				
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	     	repository(url: sonatype_url) {
	     		
			         authentication(userName: sonatype_username, password: sonatype_password)
			}
			 
			
			
			 	
	      pom.project {
	        name project.name
	        packaging 'jar'
	        // optionally artifactId can be defined here 
	        description PROJ_DESCRIPTION
	        url PROJ_WEBSITEURL

	        scm {
	          connection scm_connection
	          developerConnection scm_developerConnection
	          url scm_url
	        }

	        licenses {
	          license {
	            name PROJ_LICENCE_NAME
	            url PROJ_LICENCE_URL
	          }
	        }

	        developers {
	          developer {
	            id DEVELOPER_ID
	            name DEVELOPER_NAME
	            email DEVELOPER_EMAIL
	          }
	        }
	      }
	    }
	  }
	}
	
	publishing {
		publications {
			mavenJava(MavenPublication) {
				
				from components.java
				
				artifact sourcesJar
				artifact javaDocJar
				
			}
		}
		repositories {
	       
	        mavenLocal()    
	    }
		
	}
